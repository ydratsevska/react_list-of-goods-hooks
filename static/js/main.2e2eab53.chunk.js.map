{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT_FIELD","sortField","setSortField","isReversed","setIsReversed","changedGoods","goods","preparedGoods","sort","good1","good2","SORTED_BY_ALPHABET","localeCompare","SORTED_BY_LENGTH","length","reverse","getPreparedGoods","className","onClick","type","cn","reversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAOKA,E,oFAAAA,K,8BAAAA,E,0BAAAA,E,kBAAAA,M,KAME,IAAMC,EAAyB,CACpC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCWC,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,eAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAjCiB,SACvBC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,mBACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,iBACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAOcS,CACnBnB,EACAI,EACAE,GAQF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaN,EAASe,qBACrCQ,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAcL,EAASe,qBAJvC,iCAUA,wBACEO,QAAS,kBAAMhB,EAAaN,EAASiB,mBACrCM,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAcL,EAASiB,mBAJvC,4BAUA,wBACEK,QAAS,kBAAMd,GAAc,SAAAiB,GAAQ,OAAKA,MAC1CF,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,YAAajB,IAJjB,qBAUCF,GAAaE,EAEV,wBACEe,QAAS,kBAxCnBhB,EAAaN,EAASI,oBACtBI,GAAc,IAwCJe,KAAK,SACLF,UAAU,4BAHZ,mBAQA,MAIN,6BACGZ,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCrHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2e2eab53.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\ntype Goods = string [];\n\nenum SortType {\n  SORTED_BY_ALPHABET = 'alphabet',\n  SORTED_BY_LENGTH = 'length',\n  DEFAULT_FIELD = '',\n}\n\nexport const goodsFromServer: Goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst getPreparedGoods = (\n  goods: Goods,\n  sortField: string,\n  isReversed: boolean,\n) => {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.SORTED_BY_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.SORTED_BY_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.DEFAULT_FIELD);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const changedGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReversed,\n  );\n\n  const clearSort = () => {\n    setSortField(SortType.DEFAULT_FIELD);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.SORTED_BY_ALPHABET)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.SORTED_BY_ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.SORTED_BY_LENGTH)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.SORTED_BY_LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(reversed => !reversed)}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {sortField || isReversed\n          ? (\n            <button\n              onClick={() => clearSort()}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          ) : (\n            ''\n          )}\n      </div>\n\n      <ul>\n        {changedGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}